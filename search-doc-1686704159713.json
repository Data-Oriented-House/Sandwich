[{"title":"Introduction","type":0,"sectionRef":"#","url":"/Sandwich/docs/intro","content":"Introduction","keywords":""},{"title":"Sandwich","type":0,"sectionRef":"#","url":"/Sandwich/api/Sandwich","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#types","content":" "},{"title":"Task​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Task","content":"&lt;/&gt; type Task = (...any) → true? Executed by jobs.  "},{"title":"Job​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Job","content":"&lt;/&gt; interface Job { Task: Task Schedule: Schedule? } Executes its tasks. If its Schedule is nil, it was removed from its Schedule and cannot be used again.  "},{"title":"Schedule​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Schedule","content":"&lt;/&gt; interface Schedule { Jobs: {Job} Before: () → true? After: () → () } An ordered list of jobs. Before and after are called before and after the Schedule is executed. If Before returns true, the Schedule will not be executed.  "},{"title":"Calendar​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Calendar","content":"&lt;/&gt; interface Calendar { Schedules: {Schedule} Before: () → true? After: () → () } An ordered list of Schedules. Before and after are called before and after the Calendar is executed. If Before returns true, the Calendar will not be executed. "},{"title":"Functions​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#functions","content":" "},{"title":"Create.Schedule​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Create.Schedule","content":"&lt;/&gt; Sandwich.Create.Schedule( Tasks: {Task}, Callbacks: { Before: (() → true?)?, After: (() → ())? }? ) → Schedule From a list of tasks this creates a new Schedule by creating a new job for each task and adding it to the Schedule. The Schedule will store the jobs in the order they are given.  "},{"title":"Create.Calendar​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Create.Calendar","content":"&lt;/&gt; Sandwich.Create.Calendar( Schedules: {Schedule}, Callbacks: { Before: (() → true?)?, After: (() → ())? }? ) → Calendar This creates a new calendar from the given list of schedules. The calendar will store the schedules in the order they are given.  "},{"title":"Clear​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Clear","content":"&lt;/&gt; Sandwich.Clear(Schedule: Schedule) → () Removes all jobs from the given schedule.  "},{"title":"Replace​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Replace","content":"&lt;/&gt; Sandwich.Replace( Job: Job, Task: Task ) → () Replaces the task of the given job with the given task. "},{"title":"Errors","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich##","content":"Type\tDescription&quot;Job is not in a Schedule&quot;\tThe job was removed from its schedule before this call.  "},{"title":"Find​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Find","content":"&lt;/&gt; Sandwich.Find( Schedule: Schedule, Task: Task ) → Job? Finds the first job with the given task in the given schedule.  "},{"title":"Insert.Start​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Insert.Start","content":"&lt;/&gt; Sandwich.Insert.Start( Schedule: Schedule, Task: Task ) → Job This inserts a new job with the given task at the start of the given schedule.  "},{"title":"Insert.End​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Insert.End","content":"&lt;/&gt; Sandwich.Insert.End( Schedule: Schedule, Task: Task ) → Job This inserts a new job with the given task at the end of the given schedule.  "},{"title":"Insert.Before​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Insert.Before","content":"&lt;/&gt; Sandwich.Insert.Before( Job: Job, Task: Task ) → Job This inserts a new job with the given task before the given job. "},{"title":"Errors","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich##","content":"Type\tDescription&quot;Job is not in a Schedule&quot;\tThe job was removed from its schedule before this call.  "},{"title":"Insert.After​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Insert.After","content":"&lt;/&gt; Sandwich.Insert.After( Job: Job, Task: Task ) → Job This inserts a new job with the given task after the given job. "},{"title":"Errors","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich##","content":"Type\tDescription&quot;Job is not in a Schedule&quot;\tThe job was removed from its schedule before this call.  "},{"title":"Remove​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Remove","content":"&lt;/&gt; Sandwich.Remove(Job: Job) → () This removes the given job from its schedule. "},{"title":"Errors","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich##","content":"Type\tDescription&quot;Job is not in a Schedule&quot;\tThe job was removed from its schedule before this call.  "},{"title":"Fire.Schedule​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Fire.Schedule","content":"&lt;/&gt; Sandwich.Fire.Schedule( Schedule: Schedule, ...: any ) → () Executes all jobs in a Schedule in order with the given arguments. If a job returns a non-nil value, the Schedule will stop executing.  "},{"title":"Fire.Schedules​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Fire.Schedules","content":"&lt;/&gt; Sandwich.Fire.Schedules( Schedules: {Schedule}, ...: any ) → () Executes all jobs in all Schedules in order with the given arguments. If a job returns a non-nil value, the Schedule will stop executing and it will move to the next Schedule.  "},{"title":"Fire.Job​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Fire.Job","content":"&lt;/&gt; Sandwich.Fire.Job( Job: Job, ...: any ) → true? Executes an individual job with the given arguments. "},{"title":"Errors","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich##","content":"Type\tDescription&quot;Job is not in a Schedule&quot;\tThe job was removed from its schedule before this call.  "},{"title":"Fire.Jobs​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Fire.Jobs","content":"&lt;/&gt; Sandwich.Fire.Jobs( Job: Job, ...: any ) → () Executes a job and all jobs in its Schedule after in order with the given arguments. If a job returns a non-nil value, the jobs will stop executing. "},{"title":"Errors","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich##","content":"Type\tDescription&quot;Job is not in a Schedule&quot;\tThe job was removed from its schedule before this call.  "},{"title":"Interval​","type":1,"pageTitle":"Sandwich","url":"/Sandwich/api/Sandwich#Interval","content":"&lt;/&gt; Sandwich.Interval( Seconds: number, Callback: (...any) → true?, ...: any ) → thread Creates a new thread that will execute a callback every given number of seconds. If the callback returns a non-nil value, the thread will stop executing. "}]